#compdef topydo
#autoload
# in order to make this work, you will need to have the topydo

# adb zsh completion, based on adb completion

local -a _topydo_todo_numbers
_topydo_todo_numbers() {
	_todo_numbers=("${(f)$(topydo ls -F "%i: %s")}")
}

local -a _topydo_todo_contexts
_topydo_todo_contexts() {
	_todo_contexts=("${(f)$(_call_program todocontexts topydo lscon)}")
}

local -a _topydo_todo_projects
_topydo_todo_projects() {
	_todo_projects=("${(f)$(_call_program todoprojects topydo lsprj)}")
}

local -a _todo_tags
_todo_tags=(
	'due:Set due date'
	't:Start date (treshold)'
	'due:Due date'
	'id:Used to identify dependencies'
	'p:Used to designate parent items (dependencies)'
	'star:Add a special mark to items (starring)'
)

local -a _todo_dep_add_params
_todo_dep_add_params=(
	'to'
	'before'
	'partof'
	'after'
	'parents-of'
	'children-of'
)

local -a _todo_dep_subcommands todo_dep_subcommands
_todo_dep_subcommands=(
	'add'
	'rm'
	'ls'
	'ls to'
	'dot'
	'clean'
)

local -a _todo_dep_to todo_dep_to
_todo_dep_to=(
	'before'
	'partof'
	'after'
	'parents-of'
	'children-of'
)

local -a expl ret
local -a todo_numbers _todo_numbers
local -a todo_contexts _todo_contexts
local -a todo_projects _todo_projects

_topydo_subcommand() {
	integer ret=1
	case "$words[1]" in
		rm|del|app|append|do|pri|depri)
			_topydo_todo_numbers
			_describe -t todo_numbers 'todo number' _todo_numbers && ret=0
			;;

		ls|add)
			case "${words[$CURRENT]:0:1}" in
				"@")
					_topydo_todo_contexts
					_wanted todo_contexts expl 'todo context' compadd -p '@' -a _todo_contexts && ret=0
					;;
				"+")
					_topydo_todo_projects
					_wanted todo_projects expl 'todo projects' compadd -p '+' -a _todo_projects && ret=0
					;;
			esac
			;;
		tag)
			if (( CURRENT < 3 )); then
				_topydo_todo_numbers
				_describe -t todo_numbers 'todo number' _todo_numbers && ret=0
			elif (( CURRENT == 3 )); then
				_describe -t todo_tags 'todo tags' _todo_tags && ret=0
			fi
			;;
		edit)
			if (( CURRENT < 3 )); then
				_topydo_todo_numbers
				_describe -t todo_numbers 'todo number' _todo_numbers && ret=0
			fi
			;;
		dep)
			if (( CURRENT == 2 )); then
				_describe -t todo_dep_subcommands 'todo dep subcommands' _todo_dep_subcommands && ret=0
			else
				case "${words[2]}" in
					"add")
						if (( CURRENT == 4 )); then
							_wanted todo_dep_to expl 'todo dep to' compadd -a _todo_dep_to && ret=0
						elif (( CURRENT == 3 || CURRENT == 5 )); then
							_topydo_todo_numbers
							_describe -t todo_numbers 'todo number' _todo_numbers && ret=0
						fi
						;;
					"rm")
						# TODO query real dependencies
						if (( CURRENT == 4 )); then
							_wanted todo_rm_to expl 'todo dep to' compadd 'to' && ret=0
						elif (( CURRENT == 3 || CURRENT == 5 )); then
							_topydo_todo_numbers
							_describe -t todo_numbers 'todo number' _todo_numbers && ret=0
						fi
						;;
					*)
						if (( CURRENT == 3 )); then
							_topydo_todo_numbers
							_describe -t todo_numbers 'todo number' _todo_numbers && ret=0
						fi
						;;
				esac
			fi
			;;
	esac
	return $ret
}

local -a _1st_arguments
_1st_arguments=(
	'add:Adds a new todo item to your list.'
	{app,append}':Appends a text to the given todo item.'
	'archive:Trigger a manual archiving action.'
	'columns:Starts topydo in column mode.'
	{del,rm}':Deletes the todo item(s) with the given number(s) from the list.'
	'dep:Handles dependencies between todo items.'
	'depri:Removes the priority of the given todo item(s).'
	'do:Marks one or more todo items as complete.'
	'edit:The edit subcommand launches a text editor to edit todo items.'
	'help:Prints help texts for each subcommand.'
	'ls:Lists all (relevant) todo items.'
	{listcon,lscon}':Prints a sorted list of all contexts in the todo.txt file.'
	{lsprj,listprojects}':Prints a sorted list of all projects in the todo.txt file.'
	'postpone:Postpone todo item(s).'
	'pri:Sets the priority of todo(s) the given number(s) to the given priority.'
	'prompt:Starts topydo in prompt mode.'
	'revert:Reverts the last command.'
	'sort:Sorts the todo.txt file according to the given sort expression.'
	'tag:Add or remove tags from items.'
)

_arguments \
	'*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
	_describe -t commands "topydo command" _1st_arguments
	return
fi

_topydo_subcommand

# vim ft=zsh
